{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fe12c203-e6a6-452c-a655-afb8a03a4ff5",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "This project was made through the use of information learned while taking an LLM engineering course on Udemy. Some code is used from there, but I've made sure that I understand each line of what the code is doing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c1070317-3ed9-4659-abe3-828943230e03",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import requests\n",
    "from dotenv import load_dotenv\n",
    "from bs4 import BeautifulSoup\n",
    "from IPython.display import Markdown, display, update_display\n",
    "from openai import OpenAI\n",
    "\n",
    "import httpx\n",
    "os.environ['PYTHONHTTPSVERIFY'] = '0' # I know this is bad practice but my current set up doesn't let me use ssl verification\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4a456906-915a-4bfd-bb9d-57e505c5093f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# constants\n",
    "\n",
    "MODEL_GPT = 'gpt-4o-mini'\n",
    "MODEL_LLAMA = 'llama3.2'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a8d7923c-5f28-4c30-8556-342d7c8497c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize and constants\n",
    "\n",
    "load_dotenv(override=True)\n",
    "api_key = os.getenv('OPENAI_API_KEY')\n",
    "\n",
    "http_client = httpx.Client(verify=False)\n",
    "\n",
    "openai = OpenAI(http_client=http_client)\n",
    "openai_llama = OpenAI(http_client=http_client,base_url='http://localhost:11434/v1',api_key='ollama')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3f0d0137-52b0-47a8-81a8-11a90a010798",
   "metadata": {},
   "outputs": [],
   "source": [
    "# here is the question; type over this to ask something new\n",
    "\n",
    "system_prompt = \"\"\"\n",
    "You are to take the role of a programming tutor. Please assume no knowledge when answering \\\n",
    "eaching question. Make sure to use examples and go step by step. Make sure to return any \\\n",
    "in markdown\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "question = \"\"\"\n",
    "Please explain the object structure in python using Java object oriented as the baseline knowledge\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cd50691a-1fc8-4caa-8c81-6ed6535c6884",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "You are to take the role of a programming tutor. Please assume no knowledge when answering eaching question. Make sure to use examples and go step by step. Make sure to return any in markdown\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(system_prompt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "60ce7000-a4a5-4cce-a261-e75ef45063b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def getChatResponse():\n",
    "    stream = openai.chat.completions.create(\n",
    "        model=MODEL_GPT,\n",
    "        messages=[\n",
    "            {\"role\": \"system\", \"content\": system_prompt},\n",
    "            {\"role\": \"user\", \"content\": question}\n",
    "          ],\n",
    "        stream=True\n",
    "    )\n",
    "    \n",
    "    response = \"\"\n",
    "    display_handle = display(Markdown(\"\"), display_id=True)\n",
    "    for chunk in stream:\n",
    "        response += chunk.choices[0].delta.content or ''\n",
    "        response = response.replace(\"```\",\"\").replace(\"markdown\", \"\")\n",
    "        update_display(Markdown(response), display_id=display_handle.display_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "6b75ac16-4aee-406c-8a7b-b15b422b354b",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Sure! Let’s start by understanding the concept of objects and how they are structured in Python, especially for someone with a background in Java object-oriented programming.\n",
       "\n",
       "### Object-Oriented Programming (OOP) Basics:\n",
       "In both Java and Python, Object-Oriented Programming is a paradigm that allows us to create objects that contain both data (attributes) and behaviors (methods).\n",
       "\n",
       "### Key Concepts:\n",
       "1. **Class**: A blueprint for creating objects. In a class, you define the properties (attributes) and methods (functions) that the objects created from the class will have.\n",
       "\n",
       "2. **Object**: An instance of a class. You can think of the class as a cookie cutter and the object as the cookie you cut out.\n",
       "\n",
       "3. **Attributes**: Data stored in an object. In Java, attributes are usually defined at the top of the class, using the concept of access modifiers (e.g., `private`, `public`). \n",
       "\n",
       "4. **Methods**: Functions that belong to a class and define the behaviors of the objects created from that class.\n",
       "\n",
       "### Comparing Java to Python\n",
       "\n",
       "**In Java:**\n",
       "java\n",
       "public class Car {\n",
       "    // Attributes\n",
       "    private String color;\n",
       "    private String model;\n",
       "\n",
       "    // Constructor\n",
       "    public Car(String color, String model) {\n",
       "        this.color = color;\n",
       "        this.model = model;\n",
       "    }\n",
       "\n",
       "    // Method\n",
       "    public void displayInfo() {\n",
       "        System.out.println(\"Car Model: \" + model + \", Color: \" + color);\n",
       "    }\n",
       "}\n",
       "\n",
       "// Creating an object\n",
       "Car myCar = new Car(\"Red\", \"Toyota\");\n",
       "myCar.displayInfo();\n",
       "\n",
       "\n",
       "### In Python:\n",
       "Here’s how you can achieve the same functionality in Python!\n",
       "\n",
       "python\n",
       "class Car:\n",
       "    # Attributes are defined in the constructor\n",
       "    def __init__(self, color, model):\n",
       "        self.color = color  # self refers to the current instance\n",
       "        self.model = model\n",
       "\n",
       "    # Method\n",
       "    def display_info(self):\n",
       "        print(f\"Car Model: {self.model}, Color: {self.color}\")\n",
       "\n",
       "# Creating an object\n",
       "my_car = Car(\"Red\", \"Toyota\")\n",
       "my_car.display_info()\n",
       "\n",
       "\n",
       "### Detailed Breakdown\n",
       "\n",
       "1. **Defining a Class**:\n",
       "   - In Java, you use the `class` keyword to define a class. In Python, it’s the same, with the syntax `class ClassName`.\n",
       "\n",
       "2. **Constructor**:\n",
       "   - In Java, the constructor has the same name as the class and the return type is not specified. \n",
       "   - In Python, you define a constructor using `__init__`, and the first parameter `self` refers to the instance itself.\n",
       "\n",
       "3. **Attributes**:\n",
       "   - In Java, attributes are often private or public, whereas in Python attributes are accessible directly from the instance unless specified otherwise. \n",
       "   - You prepend attributes with `self.` to indicate that they belong to the instance.\n",
       "\n",
       "4. **Methods**:\n",
       "   - To define a method in Java, you must specify return types. In Python, you don’t have to specify a return type, and all methods must have at least one parameter (`self` for instance methods).\n",
       "\n",
       "5. **Creating an Object**:\n",
       "   - Objects are instantiated in both languages using the constructor of the class. \n",
       "   - The syntax in Python is simply `my_car = Car(\"Red\", \"Toyota\")`.\n",
       "\n",
       "### Working with Object Attributes and Methods\n",
       "You can access and modify the attributes of an object and call its methods the same way in both languages.\n",
       "\n",
       "**In Java:**\n",
       "java\n",
       "myCar.color = \"Blue\"; // Would usually be done via a setter\n",
       "myCar.displayInfo(); // Output: Car Model: Toyota, Color: Blue\n",
       "\n",
       "\n",
       "**In Python:**\n",
       "python\n",
       "my_car.color = \"Blue\"  # Directly accessing the attribute\n",
       "my_car.display_info()   # Output: Car Model: Toyota, Color: Blue\n",
       "\n",
       "\n",
       "### Summary\n",
       "In conclusion, Python's object structure is similar to Java's but with a more concise syntax and some differences in terms of how methods and attributes are defined and used. Understanding these concepts will help you adapt your knowledge of Java to Python programming effectively! If you have more questions or need clarification, feel free to ask!"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "getChatResponse()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8f7c8ea8-4082-4ad0-8751-3301adcf6538",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "# Get Llama 3.2 to answer\n",
    "def getLLamaResponse():\n",
    "    stream = openai_llama.chat.completions.create(\n",
    "        model=MODEL_LLAMA,\n",
    "        messages=[\n",
    "            {\"role\": \"system\", \"content\": system_prompt},\n",
    "            {\"role\": \"user\", \"content\": question}\n",
    "          ],\n",
    "        stream=True\n",
    "    )\n",
    "    \n",
    "    response = \"\"\n",
    "    display_handle = display(Markdown(\"\"), display_id=True)\n",
    "    for chunk in stream:\n",
    "        response += chunk.choices[0].delta.content or ''\n",
    "        response = response.replace(\"```\",\"\").replace(\"markdown\", \"\")\n",
    "        update_display(Markdown(response), display_id=display_handle.display_id)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "647340dd-1053-424a-bff4-1b2ca53be892",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "# Object Structure in Python\n",
       "=====================================\n",
       "\n",
       "As a programming tutor, I'll guide you through understanding the concept of objects in Python based on your basic knowledge of Java. We'll explore how classes and objects work in Python.\n",
       "\n",
       "### Classes in Java vs Python\n",
       "\n",
       "In Java, a class is defined using the `class` keyword followed by the name of the class. For example:\n",
       "\n",
       "java\n",
       "public class Person {\n",
       "    private String name;\n",
       "    private int age;\n",
       "\n",
       "    public Person(String name, int age) {\n",
       "        this.name = name;\n",
       "        this.age = age;\n",
       "    }\n",
       "\n",
       "    // getters and setters for name and age\n",
       "}\n",
       "\n",
       "\n",
       "In Python, a class is defined using the `class` keyword followed by the name of the class. However, Python's class definition syntax is more concise:\n",
       "\n",
       "python\n",
       "class Person:\n",
       "    def __init__(self, name: str, age: int):\n",
       "        self.name = name\n",
       "        self.age = age\n",
       "\n",
       "    # getters and setters for name and age (optional)\n",
       "\n",
       "\n",
       "As you can see, the Python class definition uses indentation instead of curly brackets.\n",
       "\n",
       "### Objects in Java vs Python\n",
       "\n",
       "In Java, an object is created by instantiating a class. For example:\n",
       "\n",
       "java\n",
       "public class Main {\n",
       "    public static void main(String[] args) {\n",
       "        Person person = new Person(\"John Doe\", 30);\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "Similarly, in Python, an object is created using the `()` operator after defining a class.\n",
       "\n",
       "python\n",
       "class Main:\n",
       "    def __init__(self):\n",
       "        pass\n",
       "\n",
       "main = Main()\n",
       "person = Person(\"John Doe\", 30)\n",
       "\n",
       "\n",
       "Notice that in Python, we need to specify the type of variables when definition.\n",
       "\n",
       "### Attributes and Methods in Python\n",
       "\n",
       "In Java, attributes (data members) are declared as private variables inside a class, while methods are declared inside a class using the `public` access modifier. For example:\n",
       "\n",
       "java\n",
       "class Person {\n",
       "    private String name;\n",
       "    public int age;\n",
       "\n",
       "    public void printInfo() {\n",
       "        System.out.println(\"Name: \" + name);\n",
       "        System.out.println(\"Age: \" + age);\n",
       "    }\n",
       "}\n",
       "\n",
       "\n",
       "In Python, attributes and methods have similar declarations:\n",
       "\n",
       "python\n",
       "class Person:\n",
       "    def __init__(self):\n",
       "        self.name = \"\"\n",
       "        self.age = 0\n",
       "\n",
       "    def print_info(self):\n",
       "        print(f\"Name: {self.name}\")\n",
       "        print(f\"Age: {self.age}\")\n",
       "\n",
       "\n",
       "Similarly to Java, Python's attribute and method name syntax is case-sensitive.\n",
       "\n",
       "### Example Use Case\n",
       "---------------------\n",
       "\n",
       "Let's create a simple `Employee` class in Python with attributes for name, age, and salary:\n",
       "\n",
       "python\n",
       "class Employee:\n",
       "    def __init__(self, name: str, age: int, salary: float):\n",
       "        self.name = name\n",
       "        self.age = age\n",
       "        self.salary = salary\n",
       "\n",
       "    def print_info(self):\n",
       "        print(f\"Name: {self.name}\")\n",
       "        print(f\"Age: {self.age}\")\n",
       "        print(f\"Salary: {self.salary:\".2f}\")\n",
       "\n",
       "# Create an employee object\n",
       "emp = Employee(\"John Doe\", 30, 50000.0)\n",
       "\n",
       "# Print the employee's information\n",
       "emp.print_info()\n",
       "\n",
       "\n",
       "When you run this code, it will output:\n",
       "\n",
       "\n",
       "Name: John Doe\n",
       "Age: 30\n",
       "Salary: 50.00\n",
       "\n",
       "\n",
       "This is a basic overview of object structures in Python using Java as our baseline knowledge. As we dive deeper into various topics, I'll be happy to explain more concepts and provide additional examples."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "getLLamaResponse()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83df96d9-7d46-48f6-8740-796d85739095",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
